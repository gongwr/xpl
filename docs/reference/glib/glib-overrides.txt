# This file makes most of the thread related macros look like
# functions, which they really were, if possible easy.

<MACRO>
<NAME>XPL_DISABLE_DEPRECATION_WARNINGS</NAME>
#ifdef XPL_DISABLE_DEPRECATION_WARNINGS
</MACRO>

<MACRO>
<NAME>G_ATOMIC_LOCK_FREE</NAME>
#define G_ATOMIC_LOCK_FREE
</MACRO>

# default thread implementation

<MACRO>
<NAME>G_THREADS_IMPL_POSIX</NAME>
#define G_THREADS_IMPL_POSIX
</MACRO>

<MACRO>
<NAME>G_THREADS_IMPL_WIN32</NAME>
#define G_THREADS_IMPL_NONE
</MACRO>

# threads supported?

<FUNCTION>
<NAME>xthread_supported</NAME>
<RETURNS>xboolean_t</RETURNS>
</FUNCTION>

# xmutex_t

<FUNCTION>
<NAME>g_mutex_new</NAME>
<RETURNS>xmutex_t *</RETURNS>
</FUNCTION>

<FUNCTION>
<NAME>g_mutex_lock</NAME>
<RETURNS>void</RETURNS>
xmutex_t *mutex
</FUNCTION>

<FUNCTION>
<NAME>g_mutex_trylock</NAME>
<RETURNS>xboolean_t</RETURNS>
xmutex_t *mutex
</FUNCTION>

<FUNCTION>
<NAME>g_mutex_unlock</NAME>
<RETURNS>void</RETURNS>
xmutex_t *mutex
</FUNCTION>

<FUNCTION>
<NAME>g_mutex_free</NAME>
<RETURNS>void</RETURNS>
xmutex_t *mutex
</FUNCTION>

# GStaticMutex

<STRUCT>
<NAME>GStaticMutex</NAME>
</STRUCT>

<MACRO>
<NAME>G_STATIC_MUTEX_INIT</NAME>
#define G_STATIC_MUTEX_INIT
</MACRO>

<FUNCTION>
<NAME>g_static_mutex_lock</NAME>
<RETURNS>void</RETURNS>
GStaticMutex* mutex
</FUNCTION>

<FUNCTION>
<NAME>g_static_mutex_trylock</NAME>
<RETURNS>xboolean_t</RETURNS>
GStaticMutex* mutex
</FUNCTION>

<FUNCTION>
<NAME>g_static_mutex_unlock</NAME>
<RETURNS>void</RETURNS>
GStaticMutex* mutex
</FUNCTION>

<FUNCTION>
<NAME>g_static_mutex_get_mutex</NAME>
<RETURNS>xmutex_t *</RETURNS>
GStaticMutex* mutex
</FUNCTION>

# xthread_t

<FUNCTION>
<NAME>xthread_yield</NAME>
<RETURNS>void</RETURNS>
</FUNCTION>

<FUNCTION>
<NAME>xthread_create</NAME>
<RETURNS>xthread_t *</RETURNS>
GThreadFunc func
xpointer_t data,
xboolean_t joinable,
xerror_t **error
</FUNCTION>

# G_LOCK_* macros

<MACRO>
<NAME>G_LOCK_DEFINE</NAME>
#define G_LOCK_DEFINE(name)
</MACRO>

<MACRO>
<NAME>G_LOCK_DEFINE_STATIC</NAME>
#define G_LOCK_DEFINE_STATIC(name)
</MACRO>

<MACRO>
<NAME>G_LOCK_EXTERN</NAME>
#define G_LOCK_EXTERN(name)
</MACRO>

<MACRO>
<NAME>G_LOCK</NAME>
#define G_LOCK(name)
</MACRO>

<MACRO>
<NAME>G_UNLOCK</NAME>
#define G_UNLOCK(name)
</MACRO>

<MACRO>
<NAME>G_TRYLOCK</NAME>
#define G_TRYLOCK(name)
</MACRO>

# xcond_t

<FUNCTION>
<NAME>g_cond_new</NAME>
<RETURNS>xcond_t*</RETURNS>
</FUNCTION>

<FUNCTION>
<NAME>g_cond_signal</NAME>
<RETURNS>void</RETURNS>
xcond_t *cond
</FUNCTION>

<FUNCTION>
<NAME>g_cond_broadcast</NAME>
<RETURNS>void</RETURNS>
xcond_t *cond
</FUNCTION>

<FUNCTION>
<NAME>g_cond_wait</NAME>
<RETURNS>void</RETURNS>
xcond_t *cond, xmutex_t *mutex
</FUNCTION>

<FUNCTION>
<NAME>g_cond_timed_wait</NAME>
<RETURNS>xboolean_t</RETURNS>
xcond_t *cond, xmutex_t *mutex, GTimeVal *abs_time
</FUNCTION>

<FUNCTION>
<NAME>g_cond_free</NAME>
<RETURNS>void</RETURNS>
xcond_t *cond
</FUNCTION>

# xprivate_t
<MACRO>
<NAME>G_PRIVATE_INIT</NAME>
#define G_PRIVATE_INIT(notify)
</MACRO>

# GStaticPrivate

<MACRO>
<NAME>G_STATIC_PRIVATE_INIT</NAME>
#define G_STATIC_PRIVATE_INIT
</MACRO>

# Definitions for different operating systems

<MACRO>
<NAME>G_OS_UNIX</NAME>
#define G_OS_UNIX
</MACRO>

<MACRO>
<NAME>G_OS_WIN32</NAME>
#define G_OS_WIN32
</MACRO>

# g_ascii_isxxx

<FUNCTION>
<NAME>g_ascii_isalnum</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isalpha</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_iscntrl</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isdigit</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isgraph</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_islower</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isprint</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_ispunct</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isspace</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isupper</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

<FUNCTION>
<NAME>g_ascii_isxdigit</NAME>
<RETURNS>xboolean_t</RETURNS>
xchar_t c
</FUNCTION>

# g_atomic

<FUNCTION>
<NAME>g_atomic_int_inc</NAME>
<RETURNS>void</RETURNS>
xint_t *atomic
</FUNCTION>

<FUNCTION>
<NAME>g_atomic_int_dec_and_test</NAME>
<RETURNS>xboolean_t</RETURNS>
xint_t *atomic
</FUNCTION>

<MACRO>
<NAME>G_VA_COPY</NAME>
#define G_VA_COPY(ap1,ap2)
</MACRO>
