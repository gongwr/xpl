/* GDBus - GLib D-Bus Library
 *
 * Copyright (C) 2008-2010 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
 *
 * Author: David Zeuthen <davidz@redhat.com>
 */

#ifndef __G_DBUS_ERROR_H__
#define __G_DBUS_ERROR_H__

#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
#endif

#include <gio/giotypes.h>

G_BEGIN_DECLS

/**
 * G_DBUS_ERROR:
 *
 * Error domain for errors generated by a remote message bus. Errors
 * in this domain will be from the #GDBusError enumeration.  See
 * #xerror_t for more information on error domains.
 *
 * Note that this error domain is intended only for
 * returning errors from a remote message bus process. Errors
 * generated locally in-process by e.g. #GDBusConnection should use the
 * %G_IO_ERROR domain.
 *
 * Since: 2.26
 */
#define G_DBUS_ERROR g_dbus_error_quark()

XPL_AVAILABLE_IN_ALL
GQuark g_dbus_error_quark (void);

/* Used by applications to check, get and strip the D-Bus error name */
XPL_AVAILABLE_IN_ALL
xboolean_t g_dbus_error_is_remote_error       (const xerror_t    *error);
XPL_AVAILABLE_IN_ALL
xchar_t   *g_dbus_error_get_remote_error      (const xerror_t    *error);
XPL_AVAILABLE_IN_ALL
xboolean_t g_dbus_error_strip_remote_error    (xerror_t          *error);

/**
 * GDBusErrorEntry:
 * @error_code: An error code.
 * @dbus_error_name: The D-Bus error name to associate with @error_code.
 *
 * Struct used in g_dbus_error_register_error_domain().
 *
 * Since: 2.26
 */
struct _GDBusErrorEntry
{
  xint_t         error_code;
  const xchar_t *dbus_error_name;
};

XPL_AVAILABLE_IN_ALL
xboolean_t g_dbus_error_register_error        (GQuark                 error_domain,
                                             xint_t                   error_code,
                                             const xchar_t           *dbus_error_name);
XPL_AVAILABLE_IN_ALL
xboolean_t g_dbus_error_unregister_error      (GQuark                 error_domain,
                                             xint_t                   error_code,
                                             const xchar_t           *dbus_error_name);
XPL_AVAILABLE_IN_ALL
void     g_dbus_error_register_error_domain (const xchar_t           *error_domain_quark_name,
                                             volatile xsize_t        *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             xuint_t                  num_entries);

/* Only used by object mappings to map back and forth to xerror_t */
XPL_AVAILABLE_IN_ALL
xerror_t  *g_dbus_error_new_for_dbus_error    (const xchar_t     *dbus_error_name,
                                             const xchar_t     *dbus_error_message);
XPL_AVAILABLE_IN_ALL
void     g_dbus_error_set_dbus_error        (xerror_t         **error,
                                             const xchar_t     *dbus_error_name,
                                             const xchar_t     *dbus_error_message,
                                             const xchar_t     *format,
                                             ...) G_GNUC_PRINTF(4, 5);
XPL_AVAILABLE_IN_ALL
void     g_dbus_error_set_dbus_error_valist (xerror_t         **error,
                                             const xchar_t     *dbus_error_name,
                                             const xchar_t     *dbus_error_message,
                                             const xchar_t     *format,
                                             va_list          var_args) G_GNUC_PRINTF(4, 0);
XPL_AVAILABLE_IN_ALL
xchar_t   *g_dbus_error_encode_gerror         (const xerror_t    *error);

G_END_DECLS

#endif /* __G_DBUS_ERROR_H__ */
